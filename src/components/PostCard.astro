---
interface Props {
  title: string;
  description: string;
  pubDate: Date;
  url: string;
  heroImage?: string;
  alt?: string;
  tags?: string[];
}

const { title, description, pubDate, url, heroImage, alt, tags = [] } = Astro.props;

// Format date to display: Jan 1, 2025
const formattedDate = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
  month: 'short',
  day: 'numeric'
}).format(pubDate);
---

<article class="border border-gray-200 dark:border-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-shadow duration-300">
  {heroImage && (
    <a href={url} class="block overflow-hidden h-48">
      <img
        src={heroImage}
        alt={alt || `Cover image for ${title}`}
        class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
      />
    </a>
  )}
  
  <div class="p-5">
    <div class="flex flex-wrap gap-2 mb-3">
      {tags.map(tag => (
        <span class="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded-full text-gray-600 dark:text-gray-400">
          {tag}
        </span>
      ))}
    </div>
    
    <h2 class="text-xl font-bold mb-2">
      <a href={url} class="text-gray-900 dark:text-white hover:text-primary dark:hover:text-primary">
        {title}
      </a>
    </h2>
    
    <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-3">
      {description}
    </p>
    
    <div class="flex items-center justify-between">
      <time datetime={pubDate.toISOString()} class="text-sm text-gray-500 dark:text-gray-400">
        {formattedDate}
      </time>
      
      <a href={url} class="text-sm font-medium text-primary hover:underline">
        Read more &rarr;
      </a>
    </div>
  </div>
</article>